/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.hsr.univote.unigen.gui;

import ch.hsr.univote.unigen.helper.ConfigHelper;
import java.util.Properties;

/**
 *
 * @author Gian
 */
public class FailureConfiguration extends javax.swing.JPanel {

    /**
     * Creates new form test
     */
    public FailureConfiguration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblSchnorr = new javax.swing.JLabel();
        jCBschnorrP_isprime = new javax.swing.JCheckBox();
        jCBschnorrP_issafeprime = new javax.swing.JCheckBox();
        jCBschnorrQ_isprime = new javax.swing.JCheckBox();
        jCBschnorrG_isgenerator = new javax.swing.JCheckBox();
        jCBschnorrParameterLength = new javax.swing.JCheckBox();
        lblElGamal = new javax.swing.JLabel();
        jCBelGamalP_isprime = new javax.swing.JCheckBox();
        jCBelGamalP_issafeprime = new javax.swing.JCheckBox();
        jCBelGamalQ_isprime = new javax.swing.JCheckBox();
        jCBelGamalG_isprime = new javax.swing.JCheckBox();
        jCBelGamalParameterLength = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        lblCertificates = new javax.swing.JLabel();
        jCBcaCertificate = new javax.swing.JCheckBox();
        jCBemCertificate = new javax.swing.JCheckBox();
        jCBeaCertificate = new javax.swing.JCheckBox();
        jCBmixerCertificate = new javax.swing.JCheckBox();
        jCBtallierCertificate = new javax.swing.JCheckBox();
        jCBvotersCertificate = new javax.swing.JCheckBox();
        lblSignatures = new javax.swing.JLabel();
        jCBeaCertificateSignature = new javax.swing.JCheckBox();
        jCBelGamalParameterSignature = new javax.swing.JCheckBox();
        jCBtallierNIZKPSignature = new javax.swing.JCheckBox();
        jCBencryptionKeysSignature = new javax.swing.JCheckBox();
        jCBtallierMixerCertificateSignature = new javax.swing.JCheckBox();
        jCBelectionBasicParametersSignature = new javax.swing.JCheckBox();
        jCBelectionGeneratorSignature = new javax.swing.JCheckBox();
        jCBelectionOptionsSignature = new javax.swing.JCheckBox();
        jCBelectionDataSignature = new javax.swing.JCheckBox();
        jCBmixersNIZKPBlindedGeneratorSignature = new javax.swing.JCheckBox();
        jBtnSave = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(450, 300));
        setPreferredSize(new java.awt.Dimension(450, 300));
        setLayout(new java.awt.GridBagLayout());

        lblSchnorr.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSchnorr.setText("Schnorr Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 100;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(lblSchnorr, gridBagConstraints);

        jCBschnorrP_isprime.setSelected(true);
        jCBschnorrP_isprime.setText("Schnorr's P is prime");
        jCBschnorrP_isprime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBschnorrP_isprimeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBschnorrP_isprime, gridBagConstraints);

        jCBschnorrP_issafeprime.setSelected(true);
        jCBschnorrP_issafeprime.setText("Schnorr's P is SafePrime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBschnorrP_issafeprime, gridBagConstraints);

        jCBschnorrQ_isprime.setSelected(true);
        jCBschnorrQ_isprime.setText("Schnorr's Q is prime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBschnorrQ_isprime, gridBagConstraints);

        jCBschnorrG_isgenerator.setSelected(true);
        jCBschnorrG_isgenerator.setText("Schnorr's G is generator");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBschnorrG_isgenerator, gridBagConstraints);

        jCBschnorrParameterLength.setSelected(true);
        jCBschnorrParameterLength.setText("Schnorr's Parameter Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBschnorrParameterLength, gridBagConstraints);

        lblElGamal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblElGamal.setText("ElGamal Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 100;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(lblElGamal, gridBagConstraints);

        jCBelGamalP_isprime.setSelected(true);
        jCBelGamalP_isprime.setText("ElGamal P is prime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalP_isprime, gridBagConstraints);

        jCBelGamalP_issafeprime.setSelected(true);
        jCBelGamalP_issafeprime.setText("ElGamal P is SafePrime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalP_issafeprime, gridBagConstraints);

        jCBelGamalQ_isprime.setSelected(true);
        jCBelGamalQ_isprime.setText("ElGamal Q is prime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalQ_isprime, gridBagConstraints);

        jCBelGamalG_isprime.setSelected(true);
        jCBelGamalG_isprime.setText("ElGamal G is prime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalG_isprime, gridBagConstraints);

        jCBelGamalParameterLength.setSelected(true);
        jCBelGamalParameterLength.setText("ElGamal Parameter Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalParameterLength, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 150;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator1, gridBagConstraints);

        lblCertificates.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCertificates.setText("Certificates");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 200;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(lblCertificates, gridBagConstraints);

        jCBcaCertificate.setSelected(true);
        jCBcaCertificate.setText("CA Certificate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBcaCertificate, gridBagConstraints);

        jCBemCertificate.setSelected(true);
        jCBemCertificate.setText("EM Certificate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBemCertificate, gridBagConstraints);

        jCBeaCertificate.setSelected(true);
        jCBeaCertificate.setText("EA Certificate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBeaCertificate, gridBagConstraints);

        jCBmixerCertificate.setSelected(true);
        jCBmixerCertificate.setText("Mixer Certificate -> WELCHER?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBmixerCertificate, gridBagConstraints);

        jCBtallierCertificate.setSelected(true);
        jCBtallierCertificate.setText("Tallier Certificate -> WELCHER?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBtallierCertificate, gridBagConstraints);

        jCBvotersCertificate.setSelected(true);
        jCBvotersCertificate.setText("Voters Certificates -> WIEVIELE?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBvotersCertificate, gridBagConstraints);

        lblSignatures.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSignatures.setText("Signatures");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 200;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(lblSignatures, gridBagConstraints);

        jCBeaCertificateSignature.setSelected(true);
        jCBeaCertificateSignature.setText("EA Certificate Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBeaCertificateSignature, gridBagConstraints);

        jCBelGamalParameterSignature.setSelected(true);
        jCBelGamalParameterSignature.setText("ElGamal Parameter Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelGamalParameterSignature, gridBagConstraints);

        jCBtallierNIZKPSignature.setSelected(true);
        jCBtallierNIZKPSignature.setText("Tallier NIZKP Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBtallierNIZKPSignature, gridBagConstraints);

        jCBencryptionKeysSignature.setSelected(true);
        jCBencryptionKeysSignature.setText("Encryption Keys Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBencryptionKeysSignature, gridBagConstraints);

        jCBtallierMixerCertificateSignature.setSelected(true);
        jCBtallierMixerCertificateSignature.setText("Tallier Mixer Certificate Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBtallierMixerCertificateSignature, gridBagConstraints);

        jCBelectionBasicParametersSignature.setSelected(true);
        jCBelectionBasicParametersSignature.setText("Election Basic Parameters Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelectionBasicParametersSignature, gridBagConstraints);

        jCBelectionGeneratorSignature.setSelected(true);
        jCBelectionGeneratorSignature.setText("Election Generator Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelectionGeneratorSignature, gridBagConstraints);

        jCBelectionOptionsSignature.setSelected(true);
        jCBelectionOptionsSignature.setText("Election Options Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelectionOptionsSignature, gridBagConstraints);

        jCBelectionDataSignature.setSelected(true);
        jCBelectionDataSignature.setText("Election Data Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jCBelectionDataSignature, gridBagConstraints);

        jCBmixersNIZKPBlindedGeneratorSignature.setSelected(true);
        jCBmixersNIZKPBlindedGeneratorSignature.setText("Mixers NIZKP Blinded Generator Signature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        add(jCBmixersNIZKPBlindedGeneratorSignature, gridBagConstraints);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        jBtnSave.setText(bundle.getString("save")); // NOI18N
        jBtnSave.setActionCommand("");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 300;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jBtnSave, gridBagConstraints);
        jBtnSave.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void jCBschnorrP_isprimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBschnorrP_isprimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBschnorrP_isprimeActionPerformed

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        Properties properties = new Properties();

        properties.setProperty("schnorrP_isprime", String.valueOf(jCBschnorrP_isprime.isSelected()));
        properties.setProperty("schnorrQ_isprime", String.valueOf(jCBschnorrQ_isprime.isSelected()));
        properties.setProperty("schnorrG_isgenerator", String.valueOf(jCBschnorrG_isgenerator.isSelected()));
        properties.setProperty("schnorrP_issafeprime", String.valueOf(jCBschnorrP_issafeprime.isSelected()));
        properties.setProperty("schnorrParameterLength", String.valueOf(jCBschnorrParameterLength.isSelected()));
        
        properties.setProperty("elGamalP_isprime", String.valueOf(jCBelGamalP_isprime.isSelected()));
        properties.setProperty("elGamalQ_isprime", String.valueOf(jCBelGamalQ_isprime.isSelected()));
        properties.setProperty("elGamalG_isprime", String.valueOf(jCBelGamalG_isprime.isSelected()));
        properties.setProperty("elGamalP_issafeprime", String.valueOf(jCBelGamalP_issafeprime.isSelected()));
        properties.setProperty("elGamalParameterLength", String.valueOf(jCBelGamalParameterLength.isSelected()));
        
        properties.setProperty("encryptionKey", "true");
        properties.setProperty("electionGenerator", "true");
        properties.setProperty("verificationKeys", "true");
        
        properties.setProperty("caCertificate", String.valueOf(jCBcaCertificate.isSelected()));
        properties.setProperty("emCertificate", String.valueOf(jCBemCertificate.isSelected()));
        properties.setProperty("eaCertificate", String.valueOf(jCBeaCertificate.isSelected()));
        properties.setProperty("tallierCertificate", String.valueOf(jCBtallierCertificate.isSelected()));
        properties.setProperty("mixerCertificate", String.valueOf(jCBmixerCertificate.isSelected()));
        properties.setProperty("votersCertificate", String.valueOf(jCBvotersCertificate.isSelected()));
        
        properties.setProperty("eaCertificateSignature", String.valueOf(jCBeaCertificateSignature.isSelected()));
        properties.setProperty("electionBasicParametersSignature", String.valueOf(jCBelectionBasicParametersSignature.isSelected()));
        properties.setProperty("tallierMixerCertificateSignature", String.valueOf(jCBtallierMixerCertificateSignature.isSelected()));
        properties.setProperty("elGamalParameterSignature", String.valueOf(jCBelGamalParameterSignature.isSelected()));
        properties.setProperty("tallierNIZKPSignature", String.valueOf(jCBtallierNIZKPSignature.isSelected()));
        properties.setProperty("encryptionKeysSignature", String.valueOf(jCBencryptionKeysSignature.isSelected()));
        properties.setProperty("mixersNIZKPBlindedGeneratorSignature", String.valueOf(jCBmixersNIZKPBlindedGeneratorSignature.isSelected()));
        properties.setProperty("electionGeneratorSignature", String.valueOf(jCBelectionGeneratorSignature.isSelected()));
        properties.setProperty("electionOptionsSignature", String.valueOf(jCBelectionOptionsSignature.isSelected()));
        properties.setProperty("electionDataSignature", String.valueOf(jCBelectionDataSignature.isSelected()));
        
        properties.setProperty("tallierNIZKPEncryptionKeyShare", "true");
        properties.setProperty("mixerNIZKPBlindedGenerator", "true");     
        
        ConfigHelper.saveProperties("FaultConfigFile", properties);
    }//GEN-LAST:event_jBtnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnSave;
    private javax.swing.JCheckBox jCBcaCertificate;
    private javax.swing.JCheckBox jCBeaCertificate;
    private javax.swing.JCheckBox jCBeaCertificateSignature;
    private javax.swing.JCheckBox jCBelGamalG_isprime;
    private javax.swing.JCheckBox jCBelGamalP_isprime;
    private javax.swing.JCheckBox jCBelGamalP_issafeprime;
    private javax.swing.JCheckBox jCBelGamalParameterLength;
    private javax.swing.JCheckBox jCBelGamalParameterSignature;
    private javax.swing.JCheckBox jCBelGamalQ_isprime;
    private javax.swing.JCheckBox jCBelectionBasicParametersSignature;
    private javax.swing.JCheckBox jCBelectionDataSignature;
    private javax.swing.JCheckBox jCBelectionGeneratorSignature;
    private javax.swing.JCheckBox jCBelectionOptionsSignature;
    private javax.swing.JCheckBox jCBemCertificate;
    private javax.swing.JCheckBox jCBencryptionKeysSignature;
    private javax.swing.JCheckBox jCBmixerCertificate;
    private javax.swing.JCheckBox jCBmixersNIZKPBlindedGeneratorSignature;
    private javax.swing.JCheckBox jCBschnorrG_isgenerator;
    private javax.swing.JCheckBox jCBschnorrP_isprime;
    private javax.swing.JCheckBox jCBschnorrP_issafeprime;
    private javax.swing.JCheckBox jCBschnorrParameterLength;
    private javax.swing.JCheckBox jCBschnorrQ_isprime;
    private javax.swing.JCheckBox jCBtallierCertificate;
    private javax.swing.JCheckBox jCBtallierMixerCertificateSignature;
    private javax.swing.JCheckBox jCBtallierNIZKPSignature;
    private javax.swing.JCheckBox jCBvotersCertificate;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCertificates;
    private javax.swing.JLabel lblElGamal;
    private javax.swing.JLabel lblSchnorr;
    private javax.swing.JLabel lblSignatures;
    // End of variables declaration//GEN-END:variables
}
