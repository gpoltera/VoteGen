/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.hsr.univote.unigen.gui;

import ch.hsr.univote.unigen.VoteGenerator;
import ch.hsr.univote.unigen.board.Publisher;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Gian
 */
public class MainGUI extends javax.swing.JFrame {

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        URL imgURL = getClass().getClassLoader().getResource("iconVoteGenerator.jpg");
        ImageIcon img = new ImageIcon(imgURL);
        this.setIconImage(img.getImage());
        initComponents();
        jTabbedPanel.remove(voteGeneration);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnStartStop = new javax.swing.JButton();
        jTabbedPanel = new javax.swing.JTabbedPane();
        systemConfiguration = new ch.hsr.univote.unigen.gui.SystemConfiguration();
        cryptoConfiguration = new ch.hsr.univote.unigen.gui.CryptoConfiguration();
        candidates = new ch.hsr.univote.unigen.gui.Candidates();
        failureConfiguration = new ch.hsr.univote.unigen.gui.FailureConfiguration();
        voteGeneration = new ch.hsr.univote.unigen.gui.VoteGeneration();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuLanguage = new javax.swing.JMenu();
        jMenuItemGerman = new javax.swing.JMenuItem();
        jMenuItemEnglish = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemDocumentation = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setResizable(false);

        jBtnStartStop.setText(bundle.getString("generatevote")); // NOI18N
        jBtnStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnStartStopActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnStartStop, java.awt.BorderLayout.CENTER);

        jTabbedPanel.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPanel.setToolTipText(bundle.getString("cryptoconfiguration")); // NOI18N
        jTabbedPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPanel.setMinimumSize(new java.awt.Dimension(450, 400));
        jTabbedPanel.setPreferredSize(new java.awt.Dimension(450, 400));
        jTabbedPanel.addTab(bundle.getString("systemconfiguration"), systemConfiguration); // NOI18N

        cryptoConfiguration.setName(""); // NOI18N
        jTabbedPanel.addTab(bundle.getString("cryptoconfiguration"), cryptoConfiguration); // NOI18N
        jTabbedPanel.addTab(bundle.getString("candidates"), candidates); // NOI18N
        jTabbedPanel.addTab(bundle.getString("failureconfiguration"), failureConfiguration); // NOI18N

        voteGeneration.setToolTipText("");
        jTabbedPanel.addTab(bundle.getString("votegeneration"), voteGeneration); // NOI18N

        getContentPane().add(jTabbedPanel, java.awt.BorderLayout.PAGE_START);
        jTabbedPanel.getAccessibleContext().setAccessibleName("");
        jTabbedPanel.getAccessibleContext().setAccessibleDescription(bundle.getString("cryptoconfiguration")); // NOI18N

        jMenuFile.setText(bundle.getString("file")); // NOI18N

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText(bundle.getString("open")); // NOI18N
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText(bundle.getString("save")); // NOI18N
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemQuit.setText(bundle.getString("quit")); // NOI18N
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemQuit);

        jMenuBar.add(jMenuFile);

        jMenuLanguage.setText(bundle.getString("language")); // NOI18N

        jMenuItemGerman.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemGerman.setText(bundle.getString("german")); // NOI18N
        jMenuItemGerman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGermanActionPerformed(evt);
            }
        });
        jMenuLanguage.add(jMenuItemGerman);

        jMenuItemEnglish.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemEnglish.setText(bundle.getString("english")); // NOI18N
        jMenuItemEnglish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnglishActionPerformed(evt);
            }
        });
        jMenuLanguage.add(jMenuItemEnglish);

        jMenuBar.add(jMenuLanguage);

        jMenuHelp.setText(bundle.getString("help")); // NOI18N

        jMenuItemDocumentation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemDocumentation.setText(bundle.getString("documentation")); // NOI18N
        jMenuHelp.add(jMenuItemDocumentation);

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbout.setText(bundle.getString("about")); // NOI18N
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean votestarted = false;
    private void jBtnStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnStartStopActionPerformed
        if (!votestarted) {
            jTabbedPanel.addTab(bundle.getString("votegeneration"), voteGeneration);
            jTabbedPanel.remove(systemConfiguration);
            jTabbedPanel.remove(cryptoConfiguration);
            jTabbedPanel.remove(candidates);
            jTabbedPanel.remove(failureConfiguration);
            jBtnStartStop.setLabel(bundle.getString("stopservice"));
            new Thread() {
                public void run() {
                    try {
                        VoteGenerator.electionSequence();
                    } catch (Exception ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        Publisher.startWebSrv();
                    } catch (IOException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.start();
            votestarted = true;
        } else {
            Publisher.stopWebSrv();
            jTabbedPanel.addTab(bundle.getString("systemconfiguration"), systemConfiguration);
            jTabbedPanel.addTab(bundle.getString("cryptoconfiguration"), cryptoConfiguration);
            jTabbedPanel.addTab(bundle.getString("candidates"), candidates);
            jTabbedPanel.addTab(bundle.getString("failureconfiguration"), failureConfiguration);
            jTabbedPanel.remove(voteGeneration);
            VoteGeneration.resetProgress();
            VoteGeneration.resetText();
            jBtnStartStop.setLabel(bundle.getString("generatevote"));
            votestarted = false;
        }
    }//GEN-LAST:event_jBtnStartStopActionPerformed

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        //new MainGUI().setVisible(false);
        //new MainGUI().dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showMessageDialog(null,
                "Copyright:\nGian Poltéra 2013-2014\n\nVersion 0.2",
                "About",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("VoteGenerator Config", "vgc"));

        int state = fc.showSaveDialog(null);

        if (state == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getName();
            String filetype = "";
            if (!file.getName().endsWith(".vgc")) {
                filetype = ".vgc";
            }
            
            try {
                ZipOutputStream zipout = new ZipOutputStream(new FileOutputStream(file + filetype));
                byte[] buffer = new byte[4096];
                int len;
                FileInputStream in1 = new FileInputStream("properties/SystemConfigFile.properties");
                FileInputStream in2 = new FileInputStream("properties/CryptoConfigFile.properties");
                FileInputStream in3 = new FileInputStream("properties/FaultConfigFile.properties");
                zipout.putNextEntry(new ZipEntry("SystemConfigFile.properties"));
                while ((len = in1.read(buffer)) > 0) {
                    zipout.write(buffer, 0, len);
                }
                zipout.putNextEntry(new ZipEntry("CryptoConfigFile.properties"));
                while ((len = in2.read(buffer)) > 0) {
                    zipout.write(buffer, 0, len);
                }
                zipout.putNextEntry(new ZipEntry("FaultConfigFile.properties"));
                while ((len = in3.read(buffer)) > 0) {
                    zipout.write(buffer, 0, len);
                }
                zipout.close();
                in1.close();
                in2.close();
                in3.close();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("VoteGenerator Config", "vgc"));

        int state = fc.showOpenDialog(null);

        if (state == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            try {
                ZipFile zipFile = new ZipFile(file);
                Enumeration enu = zipFile.entries();

                while (enu.hasMoreElements()) {
                    ZipEntry zipEntry = (ZipEntry) enu.nextElement();
                    BufferedInputStream bis = null;
                    bis = new BufferedInputStream(zipFile.getInputStream(zipEntry));
                    byte[] buffer = new byte[4096];
                    int avail = bis.available();
                    if (avail > 0) {
                        buffer = new byte[avail];
                        bis.read(buffer, 0, avail);
                    }
                    
                    String fileName = zipEntry.getName();
                    BufferedOutputStream bos = null;
                    bos = new BufferedOutputStream(new FileOutputStream("properties/" + fileName));
                    bos.write(buffer, 0, buffer.length);
                    bos.close();
                    bis.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemGermanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGermanActionPerformed
        Locale locale = new Locale("de", "DE");
        Locale.setDefault(locale);
        this.setLocale(locale);
        this.dispose();
        new MainGUI().setVisible(true);
    }//GEN-LAST:event_jMenuItemGermanActionPerformed

    private void jMenuItemEnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnglishActionPerformed
        Locale locale = new Locale("en", "EN");
        Locale.setDefault(locale);
        this.setLocale(locale);
        this.dispose();
        new MainGUI().setVisible(true);
    }//GEN-LAST:event_jMenuItemEnglishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ch.hsr.univote.unigen.gui.Candidates candidates;
    private ch.hsr.univote.unigen.gui.CryptoConfiguration cryptoConfiguration;
    private ch.hsr.univote.unigen.gui.FailureConfiguration failureConfiguration;
    private javax.swing.JButton jBtnStartStop;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemDocumentation;
    private javax.swing.JMenuItem jMenuItemEnglish;
    private javax.swing.JMenuItem jMenuItemGerman;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenu jMenuLanguage;
    private javax.swing.JTabbedPane jTabbedPanel;
    private ch.hsr.univote.unigen.gui.SystemConfiguration systemConfiguration;
    private ch.hsr.univote.unigen.gui.VoteGeneration voteGeneration;
    // End of variables declaration//GEN-END:variables
}
